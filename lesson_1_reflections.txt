How did viewing a diff between two versions of a file help you see the bug that 
was introduced?

I was able to the exact changes that were made to each file and compare 
them to find the bug.

How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

It would make it easy to see how something was done before.

What do you think are the pros and cons of manually choosing when to create a 
commit, like you do in Git, vs having version automatically saved, like Google 
Docs goes?

A pro is that you choose when want to create a commit.
A con is that you might end up with to many or to little manual commits.

Why do you think some version control systems, like Git, allow saving multiple 
files in one committ, while others, like Google Docs, treat each file separately?

I think it's because Git was designed for use cases like programmers who
work on multiple files at once and Google Docs was designed for the general 
public who for the most part work on file at a time.

How can you use the commands git log and git diff to view the history files?

Git log lists the commits that have been done. Git diff will show the changes 
between two commits

How might using version control make you more confident to make changes that could
break something?

I know that the a version of the program that was fine is saved and I could go
back to it.

Now that you have your workspace set up, what do you want to try using Git for?

For right now mainly having the portfolio of projects I will be completing during
the iOS Nanaodegree

How can you use the staging area to make sure you have one commit per logical change?

It can be check with git diff --staged to compare the file to the recent commit

Whare are some situations when branches would be helpgul in keeping your history organized?
How could branches help?

When a different version of the project is made.
Branches keeps the changes made to the different version of the project seperate from 
the current project.

How do the diagrams help you visualize the branch structure?

With the diagram visualized you can easily see where each branch is connected to.

What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

You are in control of what you want to merge.
You might forget to merge.


